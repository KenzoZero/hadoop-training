# Background information on HBase Shell at:
# http://wiki.apache.org/hadoop/Hbase/Shell
#
#=========================================================
# Solution to Lab 1 on Using HBase shell
# 	Change the table paths to your own user directory 
#       cd ~
#       and then run the following commands
#
# NOTE: You can copy-paste multiple lines at a time 
#       into HBase shell. Or, you can source a script.
#       Example: hbase> source "hbase_script.txt"
#=========================================================

#  Start HBase Shell
% hbase shell

#  To get help on how to use hbase shell
help
help "put"
help "get"

#  Create a table in your home directory
# Note: Change the /user/user01 to your user account
create '/user/user01/customer', {NAME=>'addr'}, {NAME=>'order'}

#  Use ‘describe’ to get the description of the table. 

describe   '/user/user01/customer'

#  List the tables in the user home directory
list '/user/user01/'

# Execute the following statements to insert and get the records 

#Put some data into the table.
put   '/user/user01/customer',  'jsmith',  'addr:city', 'nashville'

# Use ‘get’ to retrieve the data for ‘jsmith’
get   '/user/user01/customer', 'jsmith'

#Put more data into the table.
put   '/user/user01/customer',  'jsmith',  'addr:state', 'TN'
put   '/user/user01/customer',  'jsmith',  'order:numb', '1234'
put   '/user/user01/customer',  'jsmith',  'order:date', '10-18-2014'

# Use ‘get’ to retrieve the data for ‘jsmith’
# Note that this gets ALL the data for the row. 
get   '/user/user01/customer', 'jsmith'
 
# How can we limit this to only one column family ?
get   '/user/user01/customer', 'jsmith', {COLUMNS=>['addr']} 

#  How can we limit this to a specific column?
get   '/user/user01/customer', 'jsmith', {COLUMNS=>['order:numb']} 

# Alter table to store more versions in the order column family
alter   '/user/user01/customer' , NAME => 'order', VERSIONS => 5
describe   '/user/user01/customer'

# user ordered more, put more order numbers
put   '/user/user01/customer',  'jsmith',  'order:numb', '1235'
put   '/user/user01/customer',  'jsmith',  'order:numb', '1236'
put   '/user/user01/customer',  'jsmith',  'order:numb', '1237'
put   '/user/user01/customer',  'jsmith',  'order:numb', '1238'

#  Get order number column cells
get   '/user/user01/customer', 'jsmith', {COLUMNS=>['order:numb']}

# Note that you are getting the data for only one version per cell.  
# How can we get more versions?
get '/user/user01/customer', 'jsmith', {COLUMNS=>['order:numb'], VERSIONS => 5}

# put more data  for differenet rowkey userids 
put   '/user/user01/customer',  'njones',  'addr:city', 'miami'
put   '/user/user01/customer',  'njones',  'addr:state', 'FL'
put   '/user/user01/customer',  'njones',  'order:numb', '5555'

put   '/user/user01/customer',  'tsimmons',  'addr:city', 'dallas'
put   '/user/user01/customer',  'tsimmons',  'addr:state', 'TX'

put   '/user/user01/customer',  'jsmith',  'addr:city', 'denver'
put   '/user/user01/customer',  'jsmith',  'addr:state', 'CO'
put   '/user/user01/customer',  'jsmith',  'order:numb', '6666'
put   '/user/user01/customer',  'njones',  'addr:state', 'TX'
put   '/user/user01/customer',  'amiller', 'addr:state', 'TX'

# Use ‘scan’ to retrieve rows of data for the table 
# retrieve all rows , all columns
scan   '/user/user01/customer'
# retrieve all rows , addr column family
scan   '/user/user01/customer',  {COLUMNS=>['addr']}
# retrieve all rows for order number column,  5 versions
scan   '/user/user01/customer',  {COLUMNS=>['order:numb'], VERSIONS => 5}
# retrieve rows with rowkey starting with 'njo', addr column family
scan   '/user/user01/customer',  {STARTROW => 'njo', COLUMNS=>['addr'] }
# retrieve rows with rowkey starting with 'j', stop before 't'
scan   '/user/user01/customer',  { STARTROW => 'j', STOPROW => 't'}
# retrieve rows with rowkey starting with 'a'
scan   '/user/user01/customer',  { STARTROW => 'a'}
# retrieve rows with rowkey starting with 'a'
scan   '/user/user01/customer',  { STARTROW => 't'}


#  Use ‘count’ to retrieve the number of rows in the table.  
count   '/user/user01/customer'


#  Delete data from the table. 
get     '/user/user01/customer',  'njones'
# delete a column
delete     '/user/user01/customer',  'njones',  'addr:city'	
# delete a column family 
delete     '/user/user01/customer',  'jsmith',   'addr:'
get     '/user/user01/customer',  'jsmith'
#delete a row
delete     '/user/user01/customer',  'jsmith'


#  filters
import org.apache.hadoop.hbase.filter.CompareFilter
import org.apache.hadoop.hbase.filter.SingleColumnValueFilter
import org.apache.hadoop.hbase.filter.BinaryComparator
import org.apache.hadoop.hbase.util.Bytes

scan '/user/user01/customer', {FILTER => "(PrefixFilter ('njo'))"}

scan '/user/user01/customer', { COLUMNS => 'addr:city', FILTER =>
    SingleColumnValueFilter.new(Bytes.toBytes('addr'),Bytes.toBytes('city'), CompareFilter::CompareOp.valueOf('EQUAL'), BinaryComparator.new(Bytes.toBytes('miami')))
}

